"""
Quick verification of token counting functionality
Run from project root: python verify_token_counting.py
"""

import sys
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from backend.utils.token_counter import count_tokens, calculate_cost, format_cost, PRICING


def main():
    print("Token Counting Utility Verification")
    print("=" * 50)
    
    # Test token counting
    test_texts = [
        "",
        "Hello",
        "This is a test message",
        "This is a longer message that simulates what a user might type in a conversation with a virtual client.",
        "x" * 100,  # 100 characters
        "y" * 1000,  # 1000 characters
    ]
    
    print("\n1. Token Counting Examples:")
    print("-" * 40)
    for text in test_texts:
        tokens = count_tokens(text)
        if len(text) > 50:
            display_text = f"{text[:47]}... ({len(text)} chars)"
        else:
            display_text = f"{text!r}"
        print(f"Text: {display_text}")
        print(f"  Characters: {len(text)}")
        print(f"  Tokens: {tokens}")
        print()
    
    # Test cost calculations
    print("\n2. Cost Calculation Examples:")
    print("-" * 40)
    token_counts = [100, 1000, 5000, 10000, 50000]
    
    for tokens in token_counts:
        print(f"\nFor {tokens:,} tokens:")
        for model in ["haiku", "sonnet"]:
            cost = calculate_cost(tokens, model=model, token_type="average")
            print(f"  {model.capitalize()}: {format_cost(cost)}")
    
    # Show pricing table
    print("\n3. Model Pricing (per 1M tokens):")
    print("-" * 40)
    for model, prices in PRICING.items():
        print(f"\n{model.capitalize()}:")
        for token_type, price in prices.items():
            print(f"  {token_type}: ${price:.2f}")
    
    # Simulate a conversation
    print("\n4. Simulated Conversation Cost:")
    print("-" * 40)
    conversation = [
        ("user", "Hi, I'm working with a challenging client who seems very resistant to change."),
        ("assistant", "I understand you're facing challenges with a client who is resistant to change. That can be quite frustrating. Can you tell me more about what specific behaviors or responses you're encountering?"),
        ("user", "They constantly cancel appointments and when they do show up, they're very defensive."),
        ("assistant", "It sounds like you're dealing with both engagement issues and defensive behaviors. The pattern of cancellations combined with defensiveness when present suggests they might be experiencing significant anxiety about the therapeutic process. How long have you been working with this client?"),
    ]
    
    total_tokens = 0
    print("\nConversation:")
    for i, (role, content) in enumerate(conversation):
        tokens = count_tokens(content)
        total_tokens += tokens
        print(f"\n{i+1}. {role.capitalize()}: {content[:60]}...")
        print(f"   Tokens: {tokens}")
    
    print(f"\nTotal tokens: {total_tokens}")
    print(f"Estimated cost (Haiku): {format_cost(calculate_cost(total_tokens, 'haiku'))}")
    print(f"Estimated cost (Sonnet): {format_cost(calculate_cost(total_tokens, 'sonnet'))}")
    
    # Target conversation costs
    print("\n5. Target Conversation Costs:")
    print("-" * 40)
    print("MVP Goal: < $0.01 per conversation")
    print("\nTo stay under $0.01:")
    for model in ["haiku", "sonnet"]:
        max_tokens = int(0.01 / (PRICING[model]["average"] / 1_000_000))
        print(f"  {model.capitalize()}: Up to {max_tokens:,} tokens")


if __name__ == "__main__":
    main()
    print("\nâœ… Token counting utility is working correctly!")
